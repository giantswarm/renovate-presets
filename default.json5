{
  "extends": [
    "config:recommended" // https://docs.renovatebot.com/presets-config/#configrecommended
  ],
  // The labels to add to the GitHub PRs
  "labels": ["dependencies", "renovate"],
  // The dependency dashboard is an issue created in the repo that tracks the
  // dependencies that Renovate will work againse
  "dependencyDashboard": true,
  "assigneesFromCodeOwners": true,

  // These limits are the defaults values but included here for visibility
  "branchConcurrentLimit": 10,
  "prConcurrentLimit": 10,
  "prHourlyLimit": 2,

  "ignorePaths": [
    ".github/workflows/zz_generated.*",
    ".github/workflows/codeql-analysis.yml",
    ".github/workflows/pre_commit_*.yaml"
  ],
  "ignoreDeps": [
    "actions/setup-go",
    "github.com/imdario/mergo",
    "zricethezav/gitleaks-action"
  ],

  "packageRules": [
    {
      // Create separate major releases for CAPA and CAPZ
      "matchDepNames": ["capa", "capz"],
      "separateMajorMinor": true,
      "separateMultipleMajor": true
    },
    {
      // Force opsctl to use strict semver to ignore the old sha-based releases from 2018
      "matchDepNames": ["giantswarm/opsctl"],
      "versioning": "semver"
    },
    {
      // Allow Renovate to lookup the changelog for architect-orb updates
      "matchDepNames": ["architect"],
      "sourceUrl": "https://github.com/giantswarm/architect-orb/"
    },
    {
      // Allow renovate to lookup the changelog for aws-cli
      "matchDepNames": ["amazon/aws-cli"],
      "sourceUrl": "https://github.com/aws/aws-cli",
    },
    {
      // Prevent updating HelmRelease from helm.toolkit.fluxcd.io/v2beta1
      // since we are using Flux 2.1
      "matchDepNames": ["HelmRelease"],
      "allowedVersions":  "helm.toolkit.fluxcd.io/v2beta1",
    },
    {
      // Prevent updating ImageUpdateAutomation from image.toolkit.fluxcd.io/v1beta1
      // since we are using Flux 2.1
      "matchDepNames": ["ImageUpdateAutomation"],
      "allowedVersions":  "image.toolkit.fluxcd.io/v1beta1",
    },
    {
      // Prevent updating HelmRepository from source.toolkit.fluxcd.io/v1beta2
      // since we are using Flux 2.1
      "matchDepNames": ["HelmRepository"],
      "allowedVersions":  "source.toolkit.fluxcd.io/v1beta2",
    },
    {
      // Set the location of the changelog as this is a sub-directory module
      "matchDepNames": ["github.com/giantswarm/releases/sdk"],
      "changelogUrl": "https://github.com/giantswarm/releases/blob/master/sdk/CHANGELOG.md",
      "sourceUrl": "https://github.com/giantswarm/releases",
      "sourceDirectory": "sdk",
    },
  ],

  // Supports updating both image versions and Kubernetes API versions (e.g. `apiVersion: apps/v1beta1`)
  "kubernetes": {
    "fileMatch": ["\\.y[a]?ml$"]
  },
  "customDatasources": {
    "capa": {
      "defaultRegistryUrlTemplate": "https://raw.githubusercontent.com/giantswarm/releases/master/capa/releases.json",
      },
    "capz": {
      "defaultRegistryUrlTemplate": "https://raw.githubusercontent.com/giantswarm/releases/master/azure/releases.json",
    },
  },
  "customManagers": [
    {
      // Supports various formats where a comment with `registry: ${registry url}` is on the line
      // before the version string line
      "customType": "regex",
      "fileMatch": [
        ".*y[a]?ml$",
        "Dockerfile$",
        "^Makefile\\..+\\.mk$",
      ],
      "matchStrings": [
        "registry: (?<depName>.*)\n(.+)\\?= v?(?<currentValue>\\S+)\n",
        "registry: (?<depName>.*)\n(.+)\\/releases\\/download\\/v?(?<currentValue>.+)\\/.*",
        "registry: (?<depName>.*)\n(.+)=v?(?<currentValue>\\S+)\n",
        "registry: (?<depName>.*)\n(.+)VERSION=v?(?<currentValue>.+)\\/.*",
        "registry: (?<depName>.*)\n(\\s)*version: v?(?<currentValue>.*?)\n",
        "registry: (?<depName>.*)\n(\\s)*version:(\\s)*v?(?<currentValue>.*?)(\\s)*\n",
        "registry: (?<depName>.*)\n(\\s*)default: \"?.+:v?(?<currentValue>.*?)(-debug)?\"?\n",
        "registry: (?<depName>.*)\n(\\s*)image: \"?.+:v?(?<currentValue>.*?)\"?\n",
        "registry: (?<depName>.*)\n(\\s)*([\\w|_]+)release:(\\s)*v?(?<currentValue>.*?)(\\s)*\n",
      ],
      "datasourceTemplate": "docker",
    },
    {
      // Supports various formats where a comment with `repo: ${REPO_NAME}` is on the line
      // before the version string line
      "customType": "regex",
      "fileMatch": [
        ".*y[a]?ml$",
        "Dockerfile$",
        "^Makefile\\..+\\.mk$",
      ],
      "matchStrings": [
        "repo: (?<depName>.*)\n(.+)\\?= v?(?<currentValue>\\S+)\n",
        "repo: (?<depName>.*)\n(.+)\\/releases\\/download\\/v?(?<currentValue>.+)\\/.*",
        "repo: (?<depName>.*)\n(.+)=v?(?<currentValue>\\S+)\n",
        "repo: (?<depName>.*)\n(.+)VERSION=v?(?<currentValue>.+)\\/.*",
        "repo: (?<depName>.*)\n(\\s)*version: v?(?<currentValue>.*?)\n",
        "repo: (?<depName>.*)\n(\\s)*version:(\\s)*v?(?<currentValue>.*?)(\\s)*\n",
        "repo: (?<depName>.*)\n(\\s*)default: \"?.+:v?(?<currentValue>.*?)(-debug)?\"?\n",
        "repo: (?<depName>.*)\n(\\s*)image: \"?.+:v?(?<currentValue>.*?)\"?\n",
        "repo: (?<depName>.*)\n(\\s)*([\\w|_]+)release:(\\s)*v?(?<currentValue>.*?)(\\s)*\n",
        "repo: (?<depName>.*)\nFROM .+?:(?<currentValue>[^\s]+)",
      ],
      "datasourceTemplate": "github-releases",
      "extractVersionTemplate": "^\"?v?(?<version>.*)\"?$"
    },
    {
      // Supports matching a version where the datasource and dep name are defined in a comment on the previous line
      "customType": "regex",
      "fileMatch": ["^Dockerfile$"],
      "matchStrings": [
        "renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\sARG .+_VER=(?<currentValue>.*)\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    {
      // Supports matching against new `giantswarm/releases` for CAPA clusters
      "customType": "regex",
      "fileMatch": [
        ".*y[a]?ml$",
        "^Makefile\\..+\\.mk$",
      ],
      "matchStrings": [
        "cluster_release_provider: capa\n(\\s+)?cluster_release: (?<currentValue>\\S+)\n",
        "cluster_release_provider: capa\n(\\s+)?version: (?<currentValue>\\S+)\n",
        "cluster_release_provider: capa\n(\\s+)?AWS_RELEASE_TAG_VERSION \?= aws/v(?<currentValue>\\S+)\n",
      ],
      "depNameTemplate": "capa",
      "versioningTemplate": "semver-coerced",
      "datasourceTemplate": "custom.capa",
    },
    {
      // Supports matching against new `giantswarm/releases` for CAPZ clusters
      "customType": "regex",
      "fileMatch": [
        ".*y[a]?ml$",
        "^Makefile\\..+\\.mk$",
      ],
      "matchStrings": [
        "cluster_release_provider: capz\n(\\s+)?cluster_release: (?<currentValue>\\S+)\n",
        "cluster_release_provider: capz\n(\\s+)?version: (?<currentValue>\\S+)\n",
        "cluster_release_provider: capz\n(\\s+)?AZURE_RELEASE_TAG_VERSION \?= azure/v(?<currentValue>\\S+)\n",
      ],
      "depNameTemplate": "capz",
      "versioningTemplate": "semver-coerced",
      "datasourceTemplate": "custom.capz",
    }
  ],

}
